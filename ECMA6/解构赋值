数组：
1.写法
ago：             now：
	let a = 1;        let [a, b, c] = [1, 2, 3]
	let b = 2;
	let c = 3;
	
eg.
	let [foo, [[bar], baz]] = [1, [[2], 3]];
	foo // 1
	bar // 2
	baz // 3

	let [ , , third] = ["foo", "bar", "baz"];
	third // "baz"

	let [x, , y] = [1, 2, 3];
	x // 1
	y // 3

	let [head, ...tail] = [1, 2, 3, 4];
	head // 1
	tail // [2, 3, 4]

	let [x, y, ...z] = ['a'];
	x // "a"
	y // undefined
	z // []
	
2.如果等号的右边不是数组（严格来说，不是可遍历的结构）将会报错
	// 报错
	let [foo] = 1;
	let [foo] = false;
	let [foo] = NaN;
	let [foo] = undefined;
	let [foo] = null;
	let [foo] = {};
	
3.set结构
	let [x, y, z] = new Set(['a', 'b', 'c']);
	x // "a"

4.具有 Iterator 接口，都可以采用数组形式的解构赋值。
	function* fibs() {
	  let a = 0;
	  let b = 1;
	  while (true) {
		yield a;
		[a, b] = [b, a + b];
	  }
	}
	let [first, second, third, fourth, fifth, sixth] = fibs();
	first, second, third, fourth, fifth, sixth // 0 1 1 2 3 5