ES6

1.设置循环变量为父作用域，循环体内部为子作用域  
	for(let i = 0; i < 3; i++){
		let i = 'abc'
	}

2.var 存在 ‘变量提升’
	console.log(foo); // 输出undefined
	var foo = 2;

	console.log(bar); // 报错ReferenceError
	let bar = 2;
	
3.暂时性死区（temporal dead zone，简称 TDZ）：
	只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。
	var tmp = 123;
	if (true) {
	  tmp = 'abc'; // ReferenceError
	  let tmp;
	}
	
	同时，TDZ导致typeof不再是一个百分百安全的操作。
	typeof x; // ReferenceError
	let x;
	如果变量没有被声明，反而不会报错
	typeof undeclared_variable // "undefined"
	
4.const 申明常量：
	保证变量指向的内存地址所保存的数据不得改动。
	类似于数组，对象这类复合类型的数据结构不能被保证是不可修改的。
	
5.对象冻结
	const foo = Object.freeze({});

	// 常规模式时，下面一行不起作用；
	// 严格模式时，该行会报错
	foo.prop = 123;
	
	除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数。
	var constantize = (obj) => {
	  Object.freeze(obj);
	  Object.keys(obj).forEach( (key, i) => {
		if ( typeof obj[key] === 'object' ) {
		  constantize( obj[key] );
		}
	  });
	};
	
6.ES6开始 将全局变量于顶层对象的属性脱钩
	var a = 1;
	// 如果在 Node 的 REPL 环境，可以写成 global.a
	// 或者采用通用方法，写成 this.a
	window.a // 1

	let b = 1;
	window.b // undefined
	
7.函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行， this会指向顶层对象。
但是严格模式下，this返回值为undefined

































